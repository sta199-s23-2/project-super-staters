[
  {
    "objectID": "report.html",
    "href": "report.html",
    "title": "Statistics of Music",
    "section": "",
    "text": "Introduction and data\nThe source of this data is the Million Song Dataset. The National Science Foundation’s project IIS-0713334 funded the Million Song Dataset with a grant. There were several curators for this dataset; the Million Song Dataset used a company called the Echo Nest to derive global data points about one million contemporary songs. It was also a collaboration between the Echo Nest and LabROSA (laboratory working towards intelligent machine listening). It was collected in 2011. There are 10,000 observations with different songs associated by a song ID and their respective artists that also have an artist ID. Every observation is also defined by several variables such as artist familiarity, song loudness, song tempo, and many more. It is important to note that there are no audios in this dataset, only the derived features.\nPrevious literature exists about the topic. “Prediction of product success: explaining song popularity by audio features from Spotify data” attempts to explore the relation between song attributes such as tempo and key signature, as well as the number of plays on Spotify, the popular music-streaming platform. This paper uses a dataset of 1000 songs to investigate this question. Ultimately, the researchers find that there is only a fairly limited relation between song popularity (measured in stream count) and song features. In particular, the paper finds that tempo, which is the variable that we are most interested in, has no significant relation to stream count. Our research question builds on this article because we are similarly looking into audio features (like tempo) that make songs more popular but going further to see if a relation can be found conditional upon the genre (not an audio feature) associated with the artist a song.\nNijkamp, R. (2018). Prediction of product success: explaining song popularity by audio features from Spotify data (Bachelor’s thesis, University of Twente). http://essay.utwente.nl/75422/1/NIJKAMP_BA_IBA.pdf\nResearch Question\nGiven a genre (Rock, Pop, Rap, or Country, chosen for their sizable amount of observations within the data set), associated with an artist (artist.terms), how are the relationships between different song attributes (such as song.tempo, song.duration, artist.familiarity, song.year) related to song popularity (song.hotttnesss)? Do these relations differ for artists associated with different genres?\nMethodology\nWe first load our data.\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.2     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.4     ✔ workflows    1.1.2\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.1.0\n✔ recipes      1.0.3     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nmusic <- read_csv(\"data/music.csv\")\n\nRows: 10000 Columns: 35\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): artist.id, artist.name, artist.terms, song.id\ndbl (31): artist.familiarity, artist.hotttnesss, artist.latitude, artist.loc...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmusic_filter <- music |>\n  filter(str_detect(artist.terms, \"rock\") |\n         str_detect(artist.terms, \"rap\") |\n         str_detect(artist.terms, \"pop\") |\n         str_detect(artist.terms, \"country\"))\n\nmusic_filter$rock_genre <- if_else(\n  grepl(\"rock\", music_filter$artist.terms), \n        \"rock\", \"not rock\")\n\nmusic_filter$rap_genre <- if_else(\n  grepl(\"rap\", music_filter$artist.terms), \n        \"rap\", \"not rap\")\n\nmusic_filter$pop_genre <- if_else(\n  grepl(\"pop\", music_filter$artist.terms), \n        \"pop\", \"not pop\")\n\nmusic_filter$country_genre <- if_else(\n  grepl(\"country\", music_filter$artist.terms), \n        \"country\", \"not country\")\n\nmusic_filter <- music_filter |>\n  mutate(artist.terms = if_else(rock_genre == \"rock\", \"Rock\",\n                        if_else(rap_genre == \"rap\", \"Rap\",\n                        if_else(pop_genre == \"pop\", \"Pop\",\n                        if_else(country_genre == \"country\", \"Country\", \"\")))))\n\nNext, we plot linear regressions visually over a scatterplot to show the relation between four different song attributes (listed in our research question) and song popularity by our four genres of interest. We do this to get a general sense of how the song attributes might predict song popularity, which will help us answer our research question of how much each song attribute is correlated with a song’s popularity.\n\nmusic_filter |> \n  filter(song.hotttnesss >= 0) |>\n  ggplot(\n    aes(x = song.tempo, y = song.hotttnesss)) +\n  geom_point() +\n  geom_smooth(method = lm, se = F) +\n  facet_wrap(~ artist.terms) +\n  labs(x = \"Tempo (BPM)\", y = \"Song popularity (rated from 0-1)\",\n       title = \"The Relationship Between Song Tempo\n       and Popularity by Genre\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nmusic_filter |> \n  filter(song.hotttnesss >= 0,\n         song.duration < 1000) |>\n  ggplot(\n    aes(x = song.duration, y = song.hotttnesss)) +\n  geom_point() +\n  geom_smooth(method = lm, se = F) +\n  facet_wrap(~ artist.terms) +\n  labs(x = \"Duration (seconds)\", y = \"Song popularity (rated from 0-1)\",\n       title = \"The Relationship Between Song Duration\n       and Popularity by Genre\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nmusic_filter |> \n  filter(song.hotttnesss >= 0) |>\n  ggplot(\n    aes(x = artist.familiarity, y = song.hotttnesss)) +\n  geom_point() +\n  geom_smooth(method = lm, se = F) +\n  facet_wrap(~ artist.terms) +\n  labs(x = \"Familiarity (0-1 scale)\", y = \"Song popularity (rated from 0-1)\",\n       title = \"The Relationship Between Song Duration\n       and Popularity by Genre\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nmusic_filter |> \n  filter(song.hotttnesss >= 0,\n         song.year > 0) |>\n  ggplot(\n    aes(x = song.year, y = song.hotttnesss)) +\n  geom_point() +\n  geom_smooth(method = lm, se = F) +\n  facet_wrap(~ artist.terms) +\n  labs(x = \"Year\", y = \"Song popularity (rated from 0-1)\",\n       title = \"The Relationship Between Song Duration\n       and Popularity by Genre\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFinally, we run interactive regression models to measure the interactive effect between artist.terms (genre associated with an artist) and respective song attributes on song popularity (song.hotttnesss). We believe that an interactive model is useful in answering our research question because we are interested in the extent to which different song attributes predict song popularity, based on the genre associated with the artist. The predictions made by our interactive model can thus be broken down into the different predicted effects for each genre, which directly helps us answer our research question. Additionally, we are able to calculate the AIC and adjusted R-squared value of each model to determine which model is the greatest fit, and thus which may possibly have the most significant predictve power, which will also help us answer our question of the extent to which different song attributes predict song popularity.\n\nint_model_tempo <- linear_reg() |>\n  set_engine(\"lm\") |>\n  fit(song.hotttnesss ~ artist.terms * song.tempo, data = music_filter)\n    \ntidy(int_model_tempo)\n\n# A tibble: 8 × 5\n  term                         estimate std.error statistic p.value\n  <chr>                           <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)                 -0.371      0.171     -2.17    0.0303\n2 artist.termsPop             -0.216      0.195     -1.11    0.269 \n3 artist.termsRap              0.475      0.218      2.18    0.0297\n4 artist.termsRock             0.301      0.183      1.64    0.101 \n5 song.tempo                  -0.000534   0.00139   -0.383   0.701 \n6 artist.termsPop:song.tempo   0.00303    0.00158    1.92    0.0545\n7 artist.termsRap:song.tempo  -0.00113    0.00176   -0.640   0.522 \n8 artist.termsRock:song.tempo  0.000115   0.00149    0.0777  0.938 \n\n\nFrom the above regression, we are getting the following estimations for each genre (where Country is our “baseline” genre):\nCountry: \\(\\widehat{song.hotttness} = -0.370642967 -0.000534460 * song.tempo\\)\nPop: \\(\\widehat{song.hotttness} = -0.370642967 - 0.215690672 + (-0.000534460 + 0.00303) * song.tempo = -0.586333639 + 0.00249554* song.tempo\\)\nRap: \\(\\widehat{song.hotttness} = -0.370642967 + 0.475038439 + (-0.000534460 -0.001126495) * song.tempo = 0.104395472 - 0.001660955 * song.tempo\\)\nRock: \\(\\widehat{song.hotttness} = -0.370642967 + 0.301058002 + (-0.000534460 + 0.000115371) * song.tempo = -0.069584965 - 0.000419089 * song.tempo\\)\n(Interpretation?)\n\nint_model_duration <- linear_reg() |>\n  set_engine(\"lm\") |>\n  fit(song.hotttnesss ~ artist.terms * song.duration, data = music_filter)\n    \ntidy(int_model_duration)\n\n# A tibble: 8 × 5\n  term                           estimate std.error statistic     p.value\n  <chr>                             <dbl>     <dbl>     <dbl>       <dbl>\n1 (Intercept)                    -0.949    0.185        -5.14 0.000000296\n2 artist.termsPop                 0.712    0.193         3.69 0.000225   \n3 artist.termsRap                 1.08     0.229         4.69 0.00000287 \n4 artist.termsRock                0.758    0.190         4.00 0.0000661  \n5 song.duration                   0.00267  0.000925      2.89 0.00390    \n6 artist.termsPop:song.duration  -0.00285  0.000951     -3.00 0.00271    \n7 artist.termsRap:song.duration  -0.00363  0.00108      -3.36 0.000797   \n8 artist.termsRock:song.duration -0.00239  0.000940     -2.54 0.0112     \n\n\nFrom the above regression, we are getting the following estimations for each genre (where Country is our “baseline” genre):\nCountry: \\(\\widehat{song.hotttness} = -0.949 + 0.00267 * song.duration\\)\nPop: \\(\\widehat{song.hotttness} = -0.949 + 0.712 + (0.00267 - 0.00285) * song.duration = -0.237 - 0.00018 * song.duration\\)\nRap: \\(\\widehat{song.hotttness} = -0.949 + 1.08 + (0.00267 - 0.00363) * song.duration = 0.131 - 0.00096 * song.duration\\)\nRock: \\(\\widehat{song.hotttness} = -0.949 + 0.758 + (0.00267 - 0.00239) * song.duration = -0.191 + 0.00028 * song.duration\\)\n(Interpretation?)\n\nint_model_familiarity <- linear_reg() |>\n  set_engine(\"lm\") |>\n  fit(song.hotttnesss ~ artist.terms * artist.familiarity, data = music_filter)\n    \ntidy(int_model_familiarity)\n\n# A tibble: 8 × 5\n  term                                estimate std.error statistic     p.value\n  <chr>                                  <dbl>     <dbl>     <dbl>       <dbl>\n1 (Intercept)                          -0.958      0.180    -5.32  0.000000111\n2 artist.termsPop                      -0.0320     0.198    -0.162 0.872      \n3 artist.termsRap                       0.836      0.262     3.19  0.00142    \n4 artist.termsRock                      0.299      0.194     1.54  0.123      \n5 artist.familiarity                    1.01       0.336     3.02  0.00257    \n6 artist.termsPop:artist.familiarity    0.175      0.361     0.485 0.628      \n7 artist.termsRap:artist.familiarity   -0.977      0.429    -2.28  0.0229     \n8 artist.termsRock:artist.familiarity  -0.135      0.355    -0.379 0.705      \n\n\nFrom the above regression, we are getting the following estimations for each genre (where Country is our “baseline” genre):\nCountry: \\(\\widehat{song.hotttness} = -0.958 + 1.01 * artist.familiarity\\)\nPop: \\(\\widehat{song.hotttness} = -0.958 - 0.0320 + (1.01 + 0.175) * artist.familiarity = -0.99 + 1.185 * artist.familiarity\\)\nRap: \\(\\widehat{song.hotttness} = -0.958 + 0.836 + (1.01 - 0.977) * artist.familiarity = -0.122 + 0.033 * artist.familiarity\\)\nRock: \\(\\widehat{song.hotttness} = -0.958 + 0.299 + (1.01 - 0.135) * artist.familiarity = -0.659 + 0.875 * artist.familiarity\\)\n(Interpretation?)\n\nint_model_year <- linear_reg() |>\n  set_engine(\"lm\") |>\n  fit(song.hotttnesss ~ artist.terms * song.year, data = music_filter)\n\ntidy(int_model_year)\n\n# A tibble: 8 × 5\n  term                         estimate std.error statistic  p.value\n  <chr>                           <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)                -0.470     0.0636       -7.39  1.86e-13\n2 artist.termsPop            -0.0288    0.0714       -0.403 6.87e- 1\n3 artist.termsRap             0.251     0.0849        2.96  3.08e- 3\n4 artist.termsRock            0.182     0.0687        2.66  7.93e- 3\n5 song.year                   0.0000399 0.0000470     0.850 3.96e- 1\n6 artist.termsPop:song.year   0.000187  0.0000524     3.57  3.69e- 4\n7 artist.termsRap:song.year   0.0000755 0.0000607     1.24  2.14e- 1\n8 artist.termsRock:song.year  0.000105  0.0000500     2.10  3.60e- 2\n\n\nFrom the above regression, we are getting the following estimations for each genre (where Country is our “baseline” genre):\nCountry: \\(\\widehat{song.hotttness} = -0.470 + 0.0000399 * song.year\\)\nPop: \\(\\widehat{song.hotttness} = -0.470 - 0.0288 + (0.0000399 + 0.000187) * song.year = -0.4988 + 0.0002269 * song.year\\)\nRap: \\(\\widehat{song.hotttness} = -0.470 + 0.251 + (0.0000399 + 0.0000755) * song.year = -0.219 + 0.0001154 * song.year\\)\nRock: \\(\\widehat{song.hotttness} = -0.470 + 0.182 + (0.0000399 + 0.000105) * song.year = -0.288 + 0.0001449 * song.year\\)\n(Interpretation?)\n\nglance(int_model_tempo)$adj.r.squared\n\n[1] 0.02185871\n\nglance(int_model_tempo)$AIC\n\n[1] 6570.11\n\nglance(int_model_duration)$adj.r.squared\n\n[1] 0.02191869\n\nglance(int_model_duration)$AIC\n\n[1] 6569.921\n\nglance(int_model_familiarity)$adj.r.squared\n\n[1] 0.06255506\n\nglance(int_model_familiarity)$AIC\n\n[1] 6439.477\n\nglance(int_model_year)$adj.r.squared\n\n[1] 0.07099238\n\nglance(int_model_year)$AIC\n\n[1] 6411.685\n\n\n(interpretation)"
  }
]